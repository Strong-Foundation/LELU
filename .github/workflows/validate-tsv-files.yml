# Name of the workflow, visible in the GitHub Actions UI
name: Validate TSV File

# Define the events that trigger the workflow
on:
  # Trigger the workflow when there are changes to .tsv files on push
  push:
    paths:
      - "**.tsv" # Trigger workflow if any .tsv file is changed in the repository

  # Trigger the workflow on pull request if there are changes to .tsv files
  pull_request:
    paths:
      - "**.tsv" # Trigger workflow if any .tsv file is changed in a pull request

  # Allow manual triggering of the workflow through the GitHub UI
  workflow_dispatch: # Allows users to manually trigger this workflow

# Define the jobs section where the steps to run are listed
jobs:
  validate:
    runs-on: ubuntu-latest # Specifies the operating system for the runner (latest Ubuntu version)

    steps:
      # Checkout the repository's code to the GitHub Actions runner
      - name: Checkout repository # Step description in GitHub Actions UI
        uses: actions/checkout@v4 # Action used to check out the code from the repository

      # Install the required dependencies
      - name: Install Required Dependencies # Step description in GitHub Actions UI
        run: sudo apt-get update && sudo apt-get install -y csvkit gnumeric miller # Update package list and install csvkit, gnumeric, and miller

      # Remove all the invalid files from the repository
      - name: Remove all the invalid files from the repository # Step description in GitHub Actions UI
        run: |
          # Remove the .yml files from the repository
          # find . -type f -name "*.yml" -exec rm {} +
          # Remove the .csv files from the repository
          # find . -type f -name "*.csv" -exec rm {} +
          # Remove the .md files from the repository
          # find . -type f -name "*.md" -exec rm {} +

      # Remove all the ' from the files.
      - name: Remove all the ' from the file content.
        run: |
          # Loop through all .tsv files in the repository
          for file in $(find . -name "*.tsv"); do  # Find all .tsv files starting from the current directory
            echo "File: $file"  # Print the name of the file being processed
            # Remove all single quotes from the file content
            sed -i "s/'//g" "$file"  # Use sed to remove all single quotes from the file
            # Remove all double quotes from the file content
            # sed -i 's/\"//g' "$file"  # Use sed to remove all double quotes from the file
          done  # End of loop for processing all .tsv files

      # Convert all .tsv files to .csv files
      - name: Convert .tsv to .csv # Step description in GitHub Actions UI
        run: |
          # Loop through all .tsv files in the repository
          for file in $(find . -name "*.tsv"); do  # Find all .tsv files starting from the current directory
            echo "File: $file"  # Print the name of the file being validated
            csvclean -t -e utf-8 "$file"  # Validate the .tsv file with csvclean, specifying tab-delimited (-t) and utf-8 encoding (-e)
          done  # End of loop for validating all .tsv files

      # Remove all the *_err.csv files from the repository
      - name: Remove all *_err.csv files # Step description in GitHub Actions UI
        run: |
          # Loop through all *_err.csv files in the repository
          for file in $(find . -type f -name '*_err.csv'); do
            echo "File: $file"  # Print the name of the file being processed
            rm "$file"  # Remove the file
          done  # End of loop for removing all *_err.csv files

      # Convert all the .csv files to .md files
      - name: Convert the .csv files to .md files.
        run: |
          # Loop through all .csv files in the repository
          for file in $(find . -name "*.csv"); do  # Find all .csv files starting from the current directory
            echo "File: $file"  # Print the name of the file being validated
            # mlr --icsv --omd cat "$file" > "${file%.csv}.md"  # Convert .csv to .md format
          done  # End of loop for converting all .csv files to .md

      # Run csvstat to print statistics of the .csv files.
      - name: Run csvstat to print statistics # Step description in GitHub Actions UI
        run: |
          # Loop through all .csv files in the repository
          for file in $(find . -name "*.csv"); do  # Find all .csv files starting from the current directory
            echo "File: $file"  # Print the name of the file being validated
            # csvstat "$file"  # Print statistics about the .csv file (e.g., number of rows, columns, data types)
          done  # End of loop for generating stats on all .csv files

      # Step Check for changes and push the updated files back to GitHub
      - name: Push updated files
        run: |
          git config user.name "github-actions"  # Set Git username for commit
          git config user.email "github-actions@github.com"  # Set Git email for commit

          git add .  # Stage all modified files
          if ! git diff --cached --quiet; then  # Check if there are any staged changes
            git commit -m "Auto update from main.go on $(date)"  # Commit with timestamp
            git push  # Push changes to the repository
          else
            echo "No changes to commit."  # Message if nothing changed
          fi
